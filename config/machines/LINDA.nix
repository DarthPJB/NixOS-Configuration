# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, inputs, ... }:
{
  imports =
    [
      (modulesPath + "/installer/scan/not-detected.nix")
    ];
  environment.systemPackages = [
    inputs.nixpkgs_unstable.legacyPackages.x86_64-linux.looking-glass-client
    inputs.nixpkgs_unstable.legacyPackages.x86_64-linux.scream
    pkgs.virtiofsd
    pkgs.gwe
    pkgs.nvtop
    pkgs.virt-manager
    pkgs.tigervnc
  ];
  # ------------ custom doom ------------------

  systemd.tmpfiles.rules = [
    "f /dev/shm/looking-glass 0660 John88 qemu-libvirtd -"
    "f /dev/shm/scream 0660 John88 qemu-libvirtd -"
    "d /rendercache 0755 John88 users"
  ];

  systemd.user.services.scream-ivshmem = {
    enable = true;
    description = "Scream virBr0";
    serviceConfig = {
      ExecStart = "${pkgs.scream}/bin/scream -i virbr0";
      Restart = "always";
    };
    wantedBy = [ "multi-user.target" ];
    requires = [ "pipewire.service" ];
  };

  # Use the GRUB 2 boot loader.
  # Use the systemd-boot EFI boot loader.
  boot =
    {

      tmp.useTmpfs = false;
      #tmpOnTmpfs = false;
      supportedFilesystems = [ "ntfs" ];
      loader =
        {
          systemd-boot.enable = true;
          efi.canTouchEfiVariables = true;
        };
      initrd =
        {
          availableKernelModules = [ "vfio_virqfd" "vfio_pci" "vfio_iommu_type1" "vfio" "nvme" "xhci_pci" "ahci" "usb_storage" "usbhid" "uas" "sd_mod" ];
          kernelModules = [ "vfio_pci" ];
        };
      #kernelPackages= pkgs.linuxPackages_5_18;
      kernelModules = [ "kvm-amd" "vfio_virqfd" "vfio_pci" "vfio_iommu_type1" "vfio" ];
      kernelParams = [
        "amd_iommu=on"
      ];
      extraModulePackages = [ ];


      #this can be done better with boot.extraModProbeConfig?
      extraModprobeConfig = ''
                options vfio-pci ids=10de:2487,10de:228b,1d6b:0002,28de:2102,28de:2300,0424:2744,28de:2613,28de:2400
        	'';
      initrd.preDeviceCommands = ''
        DEVS="0000:21:00:.0 0000:21:00.1 0000:46:00.0"
        for DEV in $DEVS; do
           echo "vfio-pci > /sys/bus/pci/devices/$DEV/driver_override"
        done
        modprobe -i vfio-pci
      '';
    };

  powerManagement =
    {
      enable = false;
      cpuFreqGovernor = lib.mkDefault "performance";
    };
  services =
    {
      xserver =
        {
          libinput.enable = true;
          videoDrivers = [ "nvidia" ];
          #	deviceSection = ''
          #	  Option "Coolbits" "24"
          #	'';
        };
      printing =
        {
          enable = true;
          drivers = [ pkgs.epson-escpr ];
        };

    };
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
  };
  hardware = {
    sane.enable = true;
    opengl.enable = true;
    cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
    opengl.driSupport32Bit = true;
    nvidia = {
      modesetting.enable = false;
      powerManagement.enable = true;
    };
  };
  # Enable sound.
  sound.enable = true;

  # The global useDHCP flag is deprecated, therefore explicitly set to false here.
  # Per-interface useDHCP will be mandatory in the future, so this generated config
  # replicates the default behaviour.
  networking =
    {
      useDHCP = false;
      hostId = "b4120de4";
      hostName = "LINDA_CORE";
      interfaces =
        {
          enp69s0f0.useDHCP = true;
          enp69s0f1.useDHCP = true;
        };
      wireless =
        {
          enable = false; # Enables wireless support via wpa_supplicant.
          userControlled.enable = true;
          interfaces = [ "wlp72s0" ];
        };
    };

  fileSystems."/" =
    {
      device = "none";
      fsType = "tmpfs";
      options = [ "defaults" "size=2G" "mode=755" "nofail" ];
    };

  fileSystems."/home" =
    {
      device = "/dev/disk/by-uuid/8f73e910-ebff-49fa-9529-55bc0f06ceba";
      fsType = "ext4";
      options = [ "nofail" ];
    };

  fileSystems."/boot" =
    {
      neededForBoot = true;
      device = "/dev/disk/by-uuid/7CFB-80B3";
      fsType = "vfat";
      options = [ "nofail" ];
    };

  fileSystems."/etc/ssh" =
    {
      device = "bulk-storage/etc-ssh";
      fsType = "zfs";
      options = [ "nofail" ];
    };

  fileSystems."/var/log" =
    {
      device = "bulk-storage/var-log";
      fsType = "zfs";
      options = [ "nofail" ];
    };

  fileSystems."/nix" =
    {
      device = "speed-storage/nix";
      fsType = "zfs";
      options = [ "nofail" ];
    };

  fileSystems."/etc/nixos" =
    {
      device = "bulk-storage/etc-nixos";
      fsType = "zfs";
      options = [ "nofail" ];
    };

  fileSystems."/var/lib/libvirt" =
    {
      device = "speed-storage/var-lib-libvirt";
      fsType = "zfs";
      options = [ "nofail" ];
    };
  systemd.mounts = [
    {
      where = "/rendercache";
      what = "/speed-storage/rendercache";
      options = "bind";
      after = [ "systemd-tmpfiles-setup.service" ];
    }
    {
      where = "/bulk-storage/nas-archive/remote.worker/88/88-FS-V2/rendercache";
      what = "/speed-storage/rendercache";
      options = "bind";
      after = [ "systemd-tmpfiles-setup.service" ];
    }
    {
      where = "/var/tmp";
      what = "/speed-storage/tmp";
      options = "bind";
      after = [ "systemd-tmpfiles-setup.service" ];
    }
  ];
  #nix.envVars.TMPDIR = "/var/tmp";
  fileSystems."/tmp" =
    {
      device = "speed-storage/tmp";
      fsType = "zfs";
    };

  swapDevices = [ ];

  # This value determines the NixOS release from which the default
  # settings for stateful data
  system.stateVersion = "21.11"; # Did you read the comment?
}
